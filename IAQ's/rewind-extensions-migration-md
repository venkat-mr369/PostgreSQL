Good one 👍 Venkat, let’s break this into **3 parts**:

1. What is **pg_rewind** and its use case.
2. How to create/install extensions (like `pg_rewind`) on a migrated server.
3. Example + real use case.

---

# 🔑 1. What is `pg_rewind`?

* **pg_rewind** is a PostgreSQL utility (not just an extension, but a separate binary tool).
* Purpose: **synchronize a PostgreSQL data directory with another one**.
* Typical use case:

  * After a **failover**, the old primary has diverged from the new primary.
  * You want to make the old primary a standby again **without full rebase/backup**.
  * `pg_rewind` rewinds only the **differences** using WAL.

👉 Example:

* Node A = Primary
* Node B = Standby
* Failover: Node B becomes new Primary.
* Node A had extra writes → diverged.
* Instead of recloning Node A from scratch, run `pg_rewind` → Node A is rewound to match Node B and can rejoin replication quickly.

---

# 🔑 2. How to Create Extensions on Migrated Server

When you migrate PostgreSQL (say from 14 → 17):

* Core extensions (`pg_stat_statements`, `uuid-ossp`, `pgcrypto`, etc.) are shipped with the server.
* But you need to **create them again in each database** (they don’t auto-migrate).

👉 Steps:

1. **List available extensions** on new server:

   ```sql
   SELECT * FROM pg_available_extensions;
   ```

2. **Create the extension** in migrated database:

   ```sql
   CREATE EXTENSION pg_stat_statements;
   CREATE EXTENSION uuid-ossp;
   ```

3. **For custom extensions** (like PostGIS, timescaledb):

   * Install the OS package (e.g., `dnf install postgis*`).
   * Then run `CREATE EXTENSION postgis;`.

💡 If you dump a DB from old server → extension definitions are included, but you still must have the **extension installed** on the new server to restore properly.

---

# 🔑 3. Example with `pg_rewind` + Extensions

### Use Case: High Availability with Failover

* **Cluster setup:** Primary (Node1), Standby (Node2).
* Extension: `pg_stat_statements` used for query monitoring.

---

### Step A: Normal replication

* Node1 (primary) has `employees` table and `pg_stat_statements` enabled.
* Node2 is streaming replica.

---

### Step B: Failover

* Node1 crashes.
* Node2 promoted as new primary.
* Node1’s data diverged (some unreplicated WAL).

---

### Step C: Rewind old primary

On Node1:

```bash
pg_ctl stop -D /var/lib/pgsql/17/data

pg_rewind \
  --target-pgdata=/var/lib/pgsql/17/data \
  --source-server="host=10.0.0.2 dbname=postgres user=replicator password=xxx"

pg_ctl start -D /var/lib/pgsql/17/data
```

✅ Node1 is now rewound and can rejoin as standby.

---

### Step D: Recreate extensions on migrated server

Suppose you migrated from 14 → 17:

1. Install contrib package:

   ```bash
   dnf install postgresql17-contrib -y
   ```
2. Create extension in the database:

   ```sql
   CREATE EXTENSION pg_stat_statements;
   ```

Now both nodes have the same extension.

---

# 🧠 Interview-Ready Short Answer

> “`pg_rewind` is a PostgreSQL tool that re-synchronizes a failed primary with the new primary after a failover, by rewinding only divergent changes using WAL. It avoids recloning the full database.
> When migrating PostgreSQL to a new version, extensions don’t auto-migrate — you must install the contrib packages and run `CREATE EXTENSION` in the target database. For example, if I migrate a DB with `pg_stat_statements`, I install `postgresql-contrib`, then run `CREATE EXTENSION pg_stat_statements;` to enable it again.”

---

👉 **`pg_rewind` in a Patroni/Postgres HA cluster** (since that’s a very common real-world case)
Perfect 👍 Venkat, let’s build a **clear step-by-step flow** of using `pg_rewind` in a **two-node PostgreSQL HA cluster** (Node1 & Node2).
I’ll also show how **extensions are handled on migrated servers**.

---

# 🖥️ Setup:

* **Node1** = Primary (10.0.0.1)
* **Node2** = Standby (10.0.0.2)

Both running PostgreSQL 17 with streaming replication.

---

# 🔑 Scenario: Failover + `pg_rewind`

### 1️⃣ Normal operation

* Node1 = Primary.
* Node2 = Standby.
* Replication working fine.
* Extension `pg_stat_statements` is enabled on both:

  ```sql
  CREATE EXTENSION pg_stat_statements;
  ```

---

### 2️⃣ Failure occurs

* Node1 crashes unexpectedly.
* Node2 promoted to **new Primary**:

  ```bash
  pg_ctl promote -D /var/lib/pgsql/17/data
  ```
* Node1 still has unreplicated WAL → it has **diverged**.

---

### 3️⃣ Rewind old Primary (Node1)

* Stop Node1:

  ```bash
  pg_ctl stop -D /var/lib/pgsql/17/data
  ```

* Run `pg_rewind` to sync Node1 with Node2:

  ```bash
  pg_rewind \
    --target-pgdata=/var/lib/pgsql/17/data \
    --source-server="host=10.0.0.2 dbname=postgres user=replicator password=xxx"
  ```

* Start Node1 again:

  ```bash
  pg_ctl start -D /var/lib/pgsql/17/data
  ```

✅ Now Node1 is a standby again, synchronized with Node2.

---

# 🔑 Extensions on Migrated Servers

Suppose you migrated this cluster from PostgreSQL 14 → 17.

### 1. Check available extensions:

```sql
SELECT * FROM pg_available_extensions WHERE name='pg_stat_statements';
```

### 2. Install contrib package (on both nodes):

```bash
sudo dnf install -y postgresql17-contrib
```

### 3. Create extension in the migrated database (both nodes must match):

```sql
CREATE EXTENSION pg_stat_statements;
```

✅ Now your extension is consistent across **Node1 and Node2**.

---

# 📊 Step-by-Step Summary (Interview Style)

1. Node1 (Primary) and Node2 (Standby) are running replication.
2. Node1 crashes → Node2 promoted to Primary.
3. Node1 diverged (WAL mismatch).
4. Run `pg_rewind` on Node1 → syncs with Node2.
5. Node1 rejoins as standby.
6. After migration (14 → 17), install contrib packages and run `CREATE EXTENSION` again to enable required extensions (e.g., `pg_stat_statements`).

---

# 🧠 Interview-Ready Answer

> “In a 2-node setup, say Node1 is primary and Node2 is standby. If Node1 fails and Node2 is promoted, Node1’s data diverges. Instead of recloning, we can run `pg_rewind` pointing Node1 to Node2. This rewinds only divergent WAL and makes Node1 rejoin as standby. After a major version migration, extensions don’t auto-migrate — so I install the contrib package on both nodes and recreate them using `CREATE EXTENSION`. For example, `pg_stat_statements` must be explicitly recreated in the migrated cluster.”

---Great 👍 Venkat, here’s a **simple diagram** showing **Node1 ↔ Node2, failover, and pg_rewind flow**.

---

# 🌳 PostgreSQL HA with `pg_rewind` (2 Nodes)

```
 Step 1: Normal Operation
 ┌───────────────┐             ┌───────────────┐
 │   Node1       │             │   Node2       │
 │   Primary     │  <======    │   Standby     │
 │ (10.0.0.1)    │   WAL Sync  │ (10.0.0.2)    │
 └───────────────┘             └───────────────┘
        ↑
        │
   Clients connect
```

---

```
 Step 2: Failover (Node1 crashes)
 ┌───────────────┐             ┌───────────────┐
 │   Node1       │             │   Node2       │
 │   Crashed     │   Promote   │   NEW Primary │
 │ Diverged WAL  │ ==========> │ (10.0.0.2)    │
 └───────────────┘             └───────────────┘
```

---

```
 Step 3: Rewind Node1 with pg_rewind
 ┌───────────────┐             ┌───────────────┐
 │   Node1       │   pg_rewind │   Node2       │
 │   Old Primary │ <========== │   Primary     │
 │   Re-synced   │             │ (10.0.0.2)    │
 └───────────────┘             └───────────────┘
```

---

```
 Step 4: Node1 rejoins as Standby
 ┌───────────────┐             ┌───────────────┐
 │   Node1       │             │   Node2       │
 │   Standby     │  <======    │   Primary     │
 │ (10.0.0.1)    │   WAL Sync  │ (10.0.0.2)    │
 └───────────────┘             └───────────────┘
```

---

# 🔑 Extensions after Migration (14 → 17)

* Install contrib package on **both Node1 & Node2**:

  ```bash
  dnf install postgresql17-contrib -y
  ```
* Create extension in the database (on both nodes):

  ```sql
  CREATE EXTENSION pg_stat_statements;
  ```

✅ Ensures extensions are consistent across cluster.

---

# 🧠 Interview Tip

If asked about **pg_rewind in HA setup**, you can say:

> “In a 2-node setup, if Node1 crashes and Node2 is promoted, Node1 diverges. I stop Node1, run `pg_rewind` using Node2 as source, and restart Node1 as standby. This is faster than recloning. After a major upgrade, I also ensure extensions like `pg_stat_statements` are installed on both nodes using `CREATE EXTENSION`.”

---

**3-node version (Node1 Primary + Node2/Node3 standbys)** showing failover and rewind, since that’s more common in production clusters?


